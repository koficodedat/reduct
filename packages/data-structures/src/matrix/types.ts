/**
 * Matrix types
 *
 * Type definitions for the Matrix data structure.
 *
 * @packageDocumentation
 */

/**
 * Matrix interface
 * 
 * Represents a 2D matrix with immutable operations.
 */
export interface IMatrix<T> {
  /**
   * The number of rows in the matrix
   */
  readonly rows: number;

  /**
   * The number of columns in the matrix
   */
  readonly cols: number;

  /**
   * Get the value at the specified position
   * 
   * @param row The row index
   * @param col The column index
   * @returns The value at the specified position, or undefined if out of bounds
   */
  get(row: number, col: number): T | undefined;

  /**
   * Set the value at the specified position
   * 
   * @param row The row index
   * @param col The column index
   * @param value The value to set
   * @returns A new matrix with the updated value
   */
  set(row: number, col: number, value: T): IMatrix<T>;

  /**
   * Map each element in the matrix to a new value
   * 
   * @param fn The mapping function
   * @returns A new matrix with the mapped values
   */
  map<U>(fn: (value: T, row: number, col: number) => U): IMatrix<U>;

  /**
   * Filter elements in the matrix
   * 
   * @param fn The filter function
   * @returns A new matrix with only the elements that pass the filter
   */
  filter(fn: (value: T, row: number, col: number) => boolean): IMatrix<T>;

  /**
   * Reduce the matrix to a single value
   * 
   * @param fn The reducer function
   * @param initial The initial value
   * @returns The reduced value
   */
  reduce<U>(fn: (acc: U, value: T, row: number, col: number) => U, initial: U): U;

  /**
   * Get a row from the matrix
   * 
   * @param row The row index
   * @returns An array containing the row values, or undefined if out of bounds
   */
  getRow(row: number): T[] | undefined;

  /**
   * Get a column from the matrix
   * 
   * @param col The column index
   * @returns An array containing the column values, or undefined if out of bounds
   */
  getCol(col: number): T[] | undefined;

  /**
   * Set a row in the matrix
   * 
   * @param row The row index
   * @param values The values to set
   * @returns A new matrix with the updated row
   */
  setRow(row: number, values: T[]): IMatrix<T>;

  /**
   * Set a column in the matrix
   * 
   * @param col The column index
   * @param values The values to set
   * @returns A new matrix with the updated column
   */
  setCol(col: number, values: T[]): IMatrix<T>;

  /**
   * Transpose the matrix
   * 
   * @returns A new matrix with rows and columns swapped
   */
  transpose(): IMatrix<T>;

  /**
   * Convert the matrix to a 2D array
   * 
   * @returns A 2D array representation of the matrix
   */
  toArray(): T[][];

  /**
   * Convert the matrix to a flat array (row-major order)
   * 
   * @returns A flat array representation of the matrix
   */
  toFlatArray(): T[];
}

/**
 * Matrix factory interface
 * 
 * Provides methods for creating matrices.
 */
export interface IMatrixFactory<T> {
  /**
   * Create an empty matrix with the specified dimensions
   * 
   * @param rows The number of rows
   * @param cols The number of columns
   * @returns A new empty matrix
   */
  empty(rows: number, cols: number): IMatrix<T>;

  /**
   * Create a matrix from a 2D array
   * 
   * @param data The 2D array
   * @returns A new matrix
   */
  from(data: T[][]): IMatrix<T>;

  /**
   * Create a matrix from a flat array (row-major order)
   * 
   * @param data The flat array
   * @param rows The number of rows
   * @param cols The number of columns
   * @returns A new matrix
   */
  fromFlat(data: T[], rows: number, cols: number): IMatrix<T>;

  /**
   * Create a matrix with all elements set to the same value
   * 
   * @param rows The number of rows
   * @param cols The number of columns
   * @param value The value to fill the matrix with
   * @returns A new matrix
   */
  fill(rows: number, cols: number, value: T): IMatrix<T>;

  /**
   * Create a matrix with elements generated by a function
   * 
   * @param rows The number of rows
   * @param cols The number of columns
   * @param fn The function to generate values
   * @returns A new matrix
   */
  of(rows: number, cols: number, fn: (row: number, col: number) => T): IMatrix<T>;
}

/**
 * Numeric matrix interface
 * 
 * Extends the matrix interface with numeric operations.
 */
export interface INumericMatrix extends IMatrix<number> {
  /**
   * Add another matrix to this matrix
   * 
   * @param other The matrix to add
   * @returns A new matrix with the sum
   * @throws Error if the matrices have different dimensions
   */
  add(other: INumericMatrix): INumericMatrix;

  /**
   * Subtract another matrix from this matrix
   * 
   * @param other The matrix to subtract
   * @returns A new matrix with the difference
   * @throws Error if the matrices have different dimensions
   */
  subtract(other: INumericMatrix): INumericMatrix;

  /**
   * Multiply this matrix by another matrix
   * 
   * @param other The matrix to multiply by
   * @returns A new matrix with the product
   * @throws Error if the matrices have incompatible dimensions
   */
  multiply(other: INumericMatrix): INumericMatrix;

  /**
   * Multiply this matrix by a scalar
   * 
   * @param scalar The scalar to multiply by
   * @returns A new matrix with the product
   */
  scalarMultiply(scalar: number): INumericMatrix;

  /**
   * Calculate the determinant of this matrix
   * 
   * @returns The determinant
   * @throws Error if the matrix is not square
   */
  determinant(): number;

  /**
   * Calculate the inverse of this matrix
   * 
   * @returns A new matrix with the inverse
   * @throws Error if the matrix is not square or is singular
   */
  inverse(): INumericMatrix;

  /**
   * Calculate the trace of this matrix (sum of diagonal elements)
   * 
   * @returns The trace
   * @throws Error if the matrix is not square
   */
  trace(): number;

  /**
   * Calculate the rank of this matrix
   * 
   * @returns The rank
   */
  rank(): number;

  /**
   * Calculate the eigenvalues of this matrix
   * 
   * @returns The eigenvalues
   * @throws Error if the matrix is not square
   */
  eigenvalues(): number[];

  /**
   * Calculate the eigenvectors of this matrix
   * 
   * @returns The eigenvectors as columns of a matrix
   * @throws Error if the matrix is not square
   */
  eigenvectors(): INumericMatrix;

  /**
   * Calculate the singular value decomposition (SVD) of this matrix
   * 
   * @returns An object containing the U, S, and V matrices
   */
  svd(): {
    U: INumericMatrix;
    S: INumericMatrix;
    V: INumericMatrix;
  };

  /**
   * Calculate the LU decomposition of this matrix
   * 
   * @returns An object containing the L and U matrices
   * @throws Error if the matrix is not square
   */
  lu(): {
    L: INumericMatrix;
    U: INumericMatrix;
  };

  /**
   * Calculate the QR decomposition of this matrix
   * 
   * @returns An object containing the Q and R matrices
   */
  qr(): {
    Q: INumericMatrix;
    R: INumericMatrix;
  };

  /**
   * Calculate the Cholesky decomposition of this matrix
   * 
   * @returns The Cholesky decomposition
   * @throws Error if the matrix is not positive definite
   */
  cholesky(): INumericMatrix;

  /**
   * Solve the linear system Ax = b
   * 
   * @param b The right-hand side vector or matrix
   * @returns The solution vector or matrix
   * @throws Error if the matrix is singular or dimensions are incompatible
   */
  solve(b: INumericMatrix): INumericMatrix;

  /**
   * Calculate the condition number of this matrix
   * 
   * @returns The condition number
   */
  conditionNumber(): number;

  /**
   * Calculate the norm of this matrix
   * 
   * @param p The norm type (1, 2, or Infinity)
   * @returns The norm
   */
  norm(p?: 1 | 2 | Infinity): number;
}

/**
 * Numeric matrix factory interface
 * 
 * Extends the matrix factory interface with methods for creating numeric matrices.
 */
export interface INumericMatrixFactory extends IMatrixFactory<number> {
  /**
   * Create an identity matrix
   * 
   * @param size The size of the matrix
   * @returns A new identity matrix
   */
  identity(size: number): INumericMatrix;

  /**
   * Create a diagonal matrix
   * 
   * @param values The diagonal values
   * @returns A new diagonal matrix
   */
  diagonal(values: number[]): INumericMatrix;

  /**
   * Create a random matrix
   * 
   * @param rows The number of rows
   * @param cols The number of columns
   * @param min The minimum value (default: 0)
   * @param max The maximum value (default: 1)
   * @returns A new random matrix
   */
  random(rows: number, cols: number, min?: number, max?: number): INumericMatrix;

  /**
   * Create a matrix with values from the normal distribution
   * 
   * @param rows The number of rows
   * @param cols The number of columns
   * @param mean The mean (default: 0)
   * @param stdDev The standard deviation (default: 1)
   * @returns A new matrix with normally distributed values
   */
  randomNormal(rows: number, cols: number, mean?: number, stdDev?: number): INumericMatrix;

  /**
   * Create a Hilbert matrix
   * 
   * @param size The size of the matrix
   * @returns A new Hilbert matrix
   */
  hilbert(size: number): INumericMatrix;

  /**
   * Create a Vandermonde matrix
   * 
   * @param values The values
   * @param degree The degree (default: values.length)
   * @returns A new Vandermonde matrix
   */
  vandermonde(values: number[], degree?: number): INumericMatrix;
}
